对象的扩展
	属性的简写
	方法的简写
	属性名的表达式
		Object.is(a,b)    ===
		+0 -0    false     true
		NaN NaN  true      false
		设置原型对象Object.setPrototypeOf(obj)
		获取原型对象Object.getPrototypeOf(obj)
		Object.keys(obj)属性名数组
		Object.values(obj)属性值数组
		Object.entries(obj)键值对数组 二维数组
		Ojject.assign();
			对象浅复制
			let o=Object.assign(obj);
			//let 0=boj;
			对象合并
			let o=Object.assign({},obj,ojb1);
			可以给某个对象设置默认值
			Object.assign({},{
				method:'get',
				data:null,
				async:false
			},{
				url:'findAll..',
				method:'get',
				data:{page:0,pageSize:10}
			});
			{
				url:'findAll..',
				method:'get',
				data:{page:0,pageSize:10},
				async:false			
			}
函数的扩展
	name
		函数名字
	length
		参数个数，遇到有默认值的参数即停止，返回之前的个数
	函数参数解构
		function test([a,b]){}
		test([1,2])
		function test({a,b}){}
		test({a:1,b:2})
	rest参数
		扩展运算符的逆运算
		接受多余的数组
		function test(...tail){}
		test(1,2,3)
		tail [1,2,3]
	箭头函数
		()=>{}
		this指向箭头函数声明时的父作用域的this指向
		arguments不保存实参，不进行实参使用
数组的扩展
	Array.from(类数组，set/map有Iterator接口的数据结构类型)转为数组
	Array.of(2,3);
		创建数组[2,3]
	arr.find(function(item,index,arr){
		return>10;
	})	
		查找元素，返回第一个符合条件的元素的索引或者-1
	arr.includes(2);
		查找元素，返回true/false
	arr.fill(9);
		填充数组
	arr.keys()
		返回key值迭代器对象  for-of遍历
	arr.values()
		返回value值迭代器对象 for-of遍历
	arr.entries()
		返回键值对迭代器对象 for-of遍历

-------------------------------------------
Set集合         Map集合
Array           Object
new Set()        new Map()
增删改查        增删改查
遍历            遍历
set.add(value);添加数据
set.delete(value);删除数据
set.clear();清空数据
...
set.keys();
set.values();
set.entries();
set.forEach(function(value,key,set){})

map()
	map.set(key,value);添加数据
	...

set  ---Array
	值，不可以有重复的数据
Map --Object
	键值对，键值可以是任何数据类型的

模块
	js文件，在某个js文件中导出一部分数据，在另外一个JS文件中，如果想要使用数据，先导入在使用。
	
	NodeJS模块
		nodule.exports.a=1;导出
		require('./a.js')
	ES6模块
		export 导出
		export default导出
		import 导入

浏览器
	a.js
	b.js


Promise 
	承诺机制
	对象里放置的是异步处理函数。容器。
		如果内部的异步执行成功，调用resolve函数
		如果异步执行失败，调用reject函数

