访问对象
obj.name
obj['name']
遍历对象
for in
for(var key in obj)



删除属性
	delete obj.name
	delete obj['name']
	delete obj[key]
新增属性
    obj.age=12
修改属性
    obj.age=20
判断是否是自由属性
    obj.hasOwnProperty)('name')
判断是否有某个属性，有可能是自由属性，也有可能是继承属性
'name' in obj
判断是否是自由属性,并且可枚举
obj.propertyIsEnumerable('name')
Object原型中的属性和方法
toString()
valueOf()
toLocaleString()
...
构造函数与原型和实例的关系
每一个构造函数都有一个原型对象
 Object.prototype.constructor===Object
 实例是通过构造函数创造出来的，实例可以调用构造它的构造函数对应的原型对象中的属性和方法
 obj.toString===Object.prototype.toString
 Object.prototype.isPrototypeOf(obj)



函数
  创建方式
	 function test(){}
	 var test=function(){}
  属性
      argument
	      是一个类数组对象，保存实参
	      argument.length实参个数
	      argument.callee test函数
	  this
	      函数运行在执行环境
	      test():在test函数内部this指向global对象
	      在nodeJs环境中 global对象
	      windows环境中  Windows对象

函数调用方式
   test(参数1，参数2):global对象
   test.call(this函数内部this指向对象.参数1，参数2)；
   参数列表方式传参
   test.call(this,参数列表);
   test.apply(test函数内部this指向对象，[参数1,参数2])
   test.apply(this,参数数组)
 更改内部this
   test.call(this,参数列表)
   test.apply(this,参数数组)
   test.bind(this)(参数列表)
   bind方法可以更改this指向，返回的是一个函数，需要后面加()
